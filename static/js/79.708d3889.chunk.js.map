{"version":3,"file":"static/js/79.708d3889.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/contacts/Contacts.module.css?40b9","webpack://goit-react-hw-08-phonebook/./src/components/contactlist/ContactList.module.css?a617","components/contactlist/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/filter/Filter.module.css?e85f","components/filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/contactform/ContactForm.module.css?3637","components/contactform/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/contactformedit/ContactFormEdit.module.css?4ca3","components/contactformedit/ContactFormEdit.jsx","pages/contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contacts_wrapper__zylhr\",\"actionpanel\":\"Contacts_actionpanel__NvKCF\"};","// extracted by mini-css-extract-plugin\nexport default {\"info\":\"ContactList_info__vtyfL\",\"title\":\"ContactList_title__LJIXs\",\"wrapper\":\"ContactList_wrapper__D+Uqv\",\"holder\":\"ContactList_holder__yRJvH\",\"item\":\"ContactList_item__EcAgd\",\"items_leftside\":\"ContactList_items_leftside__rgA95\",\"items_buttons\":\"ContactList_items_buttons__PD-g4\",\"link\":\"ContactList_link__HpQa+\"};","// import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectFilter,\n  selectServerContacts,\n  selectServerData,\n} from 'redux/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { setIsEditing } from 'redux/contacts/fetchcontactslice';\n\nimport { Button } from '../button/Button';\n\nconst ContactListItem = ({ contact, action, actionedit }) => {\n  const { isEditing } = useSelector(selectServerData);\n  return (\n    <li className={css.item}>\n      <div className={css.items_leftside}>\n        <p className={css.info}>{contact.name}:</p>\n        <a className={css.link} href={'tel:+' + contact.number}>\n          {contact.number}\n        </a>\n      </div>\n      <div className={css.items_buttons}>\n        {!isEditing && (\n          <Button\n            label=\"Edit\"\n            action={actionedit}\n            formButton={false}\n            id={contact.id}\n          />\n        )}\n        {!isEditing && (\n          <Button\n            label=\"Delete\"\n            action={action}\n            formButton={false}\n            id={contact.id}\n          />\n        )}\n      </div>\n    </li>\n  );\n};\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const serverContacts = useSelector(selectServerContacts);\n\n  const handledeleteContact = evt => {\n    evt.preventDefault();\n    const id = evt.target.dataset.id;\n    dispatch(deleteContact(id));\n  };\n\n  const handleEditContact = evt => {\n    evt.preventDefault();\n    const id = evt.target.dataset.id;\n    dispatch(setIsEditing({ id: id, status: true }));\n  };\n\n  if (serverContacts.length === 0) {\n    return <p className={css.info}>Contacts list empty</p>;\n  } else {\n    if (filter === '') {\n      return (\n        <div className={css.wrapper}>\n          <h1 className={css.title}>Contacts</h1>\n          <ul className={css.holder}>\n            {serverContacts.map((contact, index) => (\n              <ContactListItem\n                key={'id' + index} //{contact.id}\n                contact={contact}\n                action={handledeleteContact}\n                actionedit={handleEditContact}\n              />\n            ))}\n          </ul>\n        </div>\n      );\n    } else {\n      const filteredContacts = serverContacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n      return (\n        <div className={css.wrapper}>\n          <h1 className={css.title}>Contacts</h1>\n          <ul className={css.holder}>\n            {filteredContacts.map((contact, index) => (\n              <ContactListItem\n                key={'id' + index} //{contact.id}\n                contact={contact}\n                action={handledeleteContact}\n                actionedit={handleEditContact}\n              />\n            ))}\n          </ul>\n        </div>\n      );\n    }\n  }\n};\n// ContactList.propTypes = {\n//   contacts: PropTypes.array,\n//   deleteContact: PropTypes.func,\n//   filter: PropTypes.string,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"filter_wrapper\":\"Filter_filter_wrapper__T0y6-\",\"filter_subtitle\":\"Filter_filter_subtitle__+oJAS\",\"info\":\"Filter_info__FfxZr\",\"inputfield\":\"Filter_inputfield__PZdrw\"};","// import PropTypes from 'prop-types';\nimport css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filter/searchfilterslice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilter = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n\n  return (\n    <div className={css.filter_wrapper}>\n      <h2 className={css.filter_subtitle}>Contacts filter</h2>\n      <p className={css.info}>Find contacts by name</p>\n      <input\n        className={css.inputfield}\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n      />\n    </div>\n  );\n};\n\n// Filter.propTypes = {\n//   inputValue: PropTypes.string,\n//   action: PropTypes.func,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"formview\":\"ContactForm_formview__IVwav\",\"form_title\":\"ContactForm_form_title__P+AgO\",\"inputlabel\":\"ContactForm_inputlabel__X2SG3\",\"inputfield\":\"ContactForm_inputfield__zshdZ\"};","// import PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\nimport { Button } from '../button/Button';\nimport Notiflix from 'notiflix';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectServerContacts } from 'redux/selectors';\nimport { uploadContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const serverContacts = useSelector(selectServerContacts);\n\n  const handleAddContact = evt => {\n    evt.preventDefault();\n    const name = evt.target.elements.name.value;\n    const number = evt.target.elements.number.value;\n    if (name !== '' && serverContacts.find(contact => contact.name === name)) {\n      Notiflix.Notify.info('Contact allready exists');\n      return;\n    }\n    if (name === '' || number === '') {\n      Notiflix.Notify.warning('Please input missing data');\n      return;\n    }\n    const regexName = new RegExp(\"^[a-zA-Za]+(([' -][a-zA-Za])?[a-zA-Za]*)*$\");\n    const regexNumberPattern =\n      /^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n    const regexNumber = new RegExp(regexNumberPattern);\n    if (!regexName.test(name) || !regexNumber.test(number)) {\n      Notiflix.Notify.failure('Correct inputed data');\n      return;\n    }\n    dispatch(uploadContact({ name: name, number: number }));\n    evt.target.reset();\n  };\n\n  return (\n    <div className={css.formview}>\n      <h3 className={css.form_title}>Add new Contact</h3>\n      <form\n        name=\"contactform\"\n        autoComplete=\"on\"\n        method=\"POST\"\n        validate=\"true\"\n        onSubmit={handleAddContact}\n      >\n        <label className={css.inputlabel}>\n          Name\n          <input\n            className={css.inputfield}\n            type=\"text\"\n            name=\"name\"\n            minLength=\"2\"\n            maxLength=\"50\"\n            autoComplete=\"name\"\n            placeholder=\" \"\n            pattern=\"^[a-zA-Za]+(([' \\-][a-zA-Za])?[a-zA-Za]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label className={css.inputlabel}>\n          Number\n          <input\n            className={css.inputfield}\n            type=\"tel\"\n            name=\"number\"\n            autoComplete=\"tel\"\n            placeholder=\" \"\n            pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <Button label=\"Add contact\" formButton={true} />\n      </form>\n    </div>\n  );\n};\n\n// ContactForm.propTypes = {\n//   addContact: PropTypes.func,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"formview\":\"ContactFormEdit_formview__YGPWd\",\"form_title\":\"ContactFormEdit_form_title__LvWqq\",\"inputlabel\":\"ContactFormEdit_inputlabel__8CSSs\",\"inputfield\":\"ContactFormEdit_inputfield__AXrz5\",\"formbuttons\":\"ContactFormEdit_formbuttons__fRn4r\"};","// import PropTypes from 'prop-types';\nimport css from './ContactFormEdit.module.css';\nimport { Button } from '../button/Button';\nimport Notiflix from 'notiflix';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectServerContacts, selectServerData } from 'redux/selectors';\nimport { updateContact } from 'redux/contacts/operations';\nimport { setIsEditing } from 'redux/contacts/fetchcontactslice';\n\nexport const ContactFormEdit = () => {\n  let placeHolderName, placeHolderNumber;\n  const dispatch = useDispatch();\n  const { idEdit } = useSelector(selectServerData);\n\n  const serverContacts = useSelector(selectServerContacts);\n\n  const element = serverContacts.find(contact => contact.id === idEdit);\n  placeHolderName = element.name;\n  placeHolderNumber = element.number;\n\n  const handleEditContact = evt => {\n    evt.preventDefault();\n    const name = evt.target.elements.name.value;\n    const number = evt.target.elements.number.value;\n    const otherContact = serverContacts.find(contact => contact.name === name);\n\n    if (otherContact && otherContact.id !== idEdit) {\n      Notiflix.Notify.info('Contact allready exists');\n      return;\n    }\n    if (name === '' && number === '') {\n      Notiflix.Notify.warning('Please input missing data');\n      return;\n    }\n    const regexName = new RegExp(\"^[a-zA-Za]+(([' -][a-zA-Za])?[a-zA-Za]*)*$\");\n    const regexNumberPattern =\n      /^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n    const regexNumber = new RegExp(regexNumberPattern);\n\n    if (name !== '') {\n      if (!regexName.test(name)) {\n        Notiflix.Notify.failure('Correct inputed name');\n        return;\n      }\n    }\n\n    if (number !== '') {\n      if (!regexNumber.test(number)) {\n        Notiflix.Notify.failure('Correct inputed number');\n        return;\n      }\n    }\n    let updateContactData;\n    if (name !== '' && number !== '') {\n      updateContactData = { name: name, number: number };\n    } else if (name !== '') {\n      updateContactData = { name: name };\n    } else if (number !== '') {\n      updateContactData = { number: number };\n    }\n\n    dispatch(\n      updateContact({\n        id: idEdit,\n        newContactData: updateContactData,\n      })\n    );\n    evt.target.reset();\n    dispatch(setIsEditing({ id: '', status: false }));\n  };\n\n  const handleCancelEdit = evt => {\n    evt.preventDefault();\n    dispatch(setIsEditing({ id: '', status: false }));\n  };\n\n  return (\n    <div className={css.formview}>\n      <h3 className={css.form_title}>Edit Contact</h3>\n      <form\n        name=\"contactformedit\"\n        autoComplete=\"on\"\n        method=\"POST\"\n        validate=\"true\"\n        onSubmit={handleEditContact}\n      >\n        <label className={css.inputlabel}>\n          Name\n          <input\n            className={css.inputfield}\n            type=\"text\"\n            name=\"name\"\n            minLength=\"2\"\n            maxLength=\"50\"\n            autoComplete=\"name\"\n            placeholder={placeHolderName}\n            pattern=\"^[a-zA-Za]+(([' \\-][a-zA-Za])?[a-zA-Za]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n        </label>\n        <label className={css.inputlabel}>\n          Number\n          <input\n            className={css.inputfield}\n            type=\"tel\"\n            name=\"number\"\n            autoComplete=\"tel\"\n            placeholder={placeHolderNumber}\n            pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          />\n        </label>\n        <div className={css.formbuttons}>\n          <Button label=\"Edit contact\" formButton={true} />\n          <Button label=\"Cancel\" formButton={false} action={handleCancelEdit} />\n        </div>\n      </form>\n    </div>\n  );\n};\n\n// ContactForm.propTypes = {\n//   addContact: PropTypes.func,\n// };\n","import css from './Contacts.module.css';\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { downloadContacts } from 'redux/contacts/operations';\nimport { selectServerData } from 'redux/selectors';\n\nimport { ContactList } from 'components/contactlist/ContactList';\nimport { Filter } from 'components/filter/Filter';\nimport { ContactForm } from 'components/contactform/ContactForm';\nimport { ContactFormEdit } from 'components/contactformedit/ContactFormEdit';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const { isEditing } = useSelector(selectServerData);\n\n  useEffect(() => {\n    dispatch(downloadContacts());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className={css.wrapper}>\n      <div>\n        <ContactList />\n      </div>\n      {isEditing ? (\n        <div className={css.actionpanel}>\n          <ContactFormEdit />\n        </div>\n      ) : (\n        <div className={css.actionpanel}>\n          <Filter />\n          <ContactForm />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactListItem","contact","action","actionedit","isEditing","useSelector","selectServerData","className","css","name","href","number","Button","label","formButton","id","ContactList","dispatch","useDispatch","filter","selectFilter","serverContacts","selectServerContacts","handledeleteContact","evt","preventDefault","target","dataset","deleteContact","handleEditContact","setIsEditing","status","length","map","index","filteredContacts","toLowerCase","includes","Filter","type","value","onChange","setFilter","ContactForm","autoComplete","method","validate","onSubmit","elements","find","Notiflix","regexName","RegExp","regexNumber","test","uploadContact","reset","minLength","maxLength","placeholder","pattern","title","required","ContactFormEdit","placeHolderName","placeHolderNumber","idEdit","element","otherContact","updateContactData","updateContact","newContactData","useEffect","downloadContacts"],"sourceRoot":""}