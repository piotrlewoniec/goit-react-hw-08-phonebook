{"version":3,"file":"static/js/377.9cbc89aa.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/contacts/Contacts.module.css?40b9","webpack://goit-react-hw-08-phonebook/./src/components/contactlist/ContactList.module.css?a617","components/contactlist/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/filter/Filter.module.css?e85f","components/filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/contactform/ContactForm.module.css?3637","components/contactform/ContactForm.jsx","pages/contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contacts_wrapper__zylhr\",\"actionpanel\":\"Contacts_actionpanel__NvKCF\"};","// extracted by mini-css-extract-plugin\nexport default {\"info\":\"ContactList_info__vtyfL\",\"title\":\"ContactList_title__LJIXs\",\"wrapper\":\"ContactList_wrapper__D+Uqv\",\"holder\":\"ContactList_holder__yRJvH\",\"item\":\"ContactList_item__EcAgd\",\"items_leftside\":\"ContactList_items_leftside__rgA95\",\"link\":\"ContactList_link__HpQa+\"};","// import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter, selectServerContacts } from 'redux/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { Button } from '../button/Button';\n\nconst ContactListItem = ({ contact, action }) => (\n  <li className={css.item}>\n    <div className={css.items_leftside}>\n      <p className={css.info}>{contact.name}:</p>\n      <a className={css.link} href={'tel:+' + contact.number}>\n        {contact.number}\n      </a>\n    </div>\n    <Button label=\"Delete\" action={action} formButton={false} id={contact.id} />\n  </li>\n);\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const serverContacts = useSelector(selectServerContacts);\n\n  const handledeleteContact = evt => {\n    evt.preventDefault();\n    const id = evt.target.dataset.id;\n    dispatch(deleteContact(id));\n  };\n\n  if (serverContacts.length === 0) {\n    return <p className={css.info}>Contacts list empty</p>;\n  } else {\n    if (filter === '') {\n      return (\n        <div className={css.wrapper}>\n          <h1 className={css.title}>Contacts</h1>\n          <ul className={css.holder}>\n            {serverContacts.map((contact, index) => (\n              <ContactListItem\n                key={'id' + index} //{contact.id}\n                contact={contact}\n                action={handledeleteContact}\n              />\n            ))}\n          </ul>\n        </div>\n      );\n    } else {\n      const filteredContacts = serverContacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n      return (\n        <div className={css.wrapper}>\n          <h1 className={css.title}>Contacts</h1>\n          <ul className={css.holder}>\n            {filteredContacts.map((contact, index) => (\n              <ContactListItem\n                key={'id' + index} //{contact.id}\n                contact={contact}\n                action={handledeleteContact}\n              />\n            ))}\n          </ul>\n        </div>\n      );\n    }\n  }\n};\n// ContactList.propTypes = {\n//   contacts: PropTypes.array,\n//   deleteContact: PropTypes.func,\n//   filter: PropTypes.string,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"filter_wrapper\":\"Filter_filter_wrapper__T0y6-\",\"filter_subtitle\":\"Filter_filter_subtitle__+oJAS\",\"info\":\"Filter_info__FfxZr\",\"inputfield\":\"Filter_inputfield__PZdrw\"};","// import PropTypes from 'prop-types';\nimport css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filter/searchfilterslice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilter = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n\n  return (\n    <div className={css.filter_wrapper}>\n      <h2 className={css.filter_subtitle}>Contacts filter</h2>\n      <p className={css.info}>Find contacts by name</p>\n      <input\n        className={css.inputfield}\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n      />\n    </div>\n  );\n};\n\n// Filter.propTypes = {\n//   inputValue: PropTypes.string,\n//   action: PropTypes.func,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"formview\":\"ContactForm_formview__IVwav\",\"form_title\":\"ContactForm_form_title__P+AgO\",\"inputlabel\":\"ContactForm_inputlabel__X2SG3\",\"inputfield\":\"ContactForm_inputfield__zshdZ\"};","// import PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\nimport { Button } from '../button/Button';\nimport Notiflix from 'notiflix';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectServerContacts } from 'redux/selectors';\nimport { uploadContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const serverContacts = useSelector(selectServerContacts);\n\n  const handleAddContact = evt => {\n    evt.preventDefault();\n    const name = evt.target.elements.name.value;\n    const number = evt.target.elements.number.value;\n    if (name !== '' && serverContacts.find(contact => contact.name === name)) {\n      Notiflix.Notify.info('Contact allready exists');\n      return;\n    }\n    if (name === '' || number === '') {\n      Notiflix.Notify.warning('Please input missing data');\n      return;\n    }\n    const regexName = new RegExp(\"^[a-zA-Za]+(([' -][a-zA-Za])?[a-zA-Za]*)*$\");\n    const regexNumberPattern =\n      /^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n    const regexNumber = new RegExp(regexNumberPattern);\n    if (!regexName.test(name) || !regexNumber.test(number)) {\n      Notiflix.Notify.failure('Correct inputed data');\n      return;\n    }\n    dispatch(uploadContact({ name: name, number: number }));\n    evt.target.reset();\n  };\n\n  return (\n    <div className={css.formview}>\n      <h3 className={css.form_title}>Add new Contact</h3>\n      <form\n        name=\"contactform\"\n        autoComplete=\"on\"\n        method=\"POST\"\n        validate=\"true\"\n        onSubmit={handleAddContact}\n      >\n        <label className={css.inputlabel}>\n          Name\n          <input\n            className={css.inputfield}\n            type=\"text\"\n            name=\"name\"\n            minLength=\"2\"\n            maxLength=\"50\"\n            autoComplete=\"name\"\n            placeholder=\" \"\n            pattern=\"^[a-zA-Za]+(([' \\-][a-zA-Za])?[a-zA-Za]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label className={css.inputlabel}>\n          Number\n          <input\n            className={css.inputfield}\n            type=\"tel\"\n            name=\"number\"\n            autoComplete=\"tel\"\n            placeholder=\" \"\n            pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <Button label=\"Add contact\" formButton={true} />\n      </form>\n    </div>\n  );\n};\n\n// ContactForm.propTypes = {\n//   addContact: PropTypes.func,\n// };\n","import css from './Contacts.module.css';\n\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { downloadContacts } from 'redux/contacts/operations';\n\nimport { ContactList } from 'components/contactlist/ContactList';\nimport { Filter } from 'components/filter/Filter';\nimport { ContactForm } from 'components/contactform/ContactForm';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(downloadContacts());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className={css.wrapper}>\n      <div>\n        <ContactList />\n      </div>\n      <div className={css.actionpanel}>\n        <Filter />\n        <ContactForm />\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactListItem","contact","action","className","css","name","href","number","Button","label","formButton","id","ContactList","dispatch","useDispatch","filter","useSelector","selectFilter","serverContacts","selectServerContacts","handledeleteContact","evt","preventDefault","target","dataset","deleteContact","length","map","index","filteredContacts","toLowerCase","includes","Filter","type","value","onChange","setFilter","ContactForm","autoComplete","method","validate","onSubmit","elements","find","Notiflix","regexName","RegExp","regexNumber","test","uploadContact","reset","minLength","maxLength","placeholder","pattern","title","required","useEffect","downloadContacts"],"sourceRoot":""}